{"version":3,"sources":["redux/actionTypes.js","redux/actions.js","redux/operations.js","components/ContactsEditor.js","redux/selectors.js","components/ContactsList.js","components/Filter.js","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["addContactRequest","createAction","actionTypes","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","getContactRequest","getContactSuccess","getContactError","name","number","payload","items","id","findContact","filter","addContact","dispatch","actions","axios","post","then","response","data","catch","error","getContacts","get","removeContact","delete","ContactsEditor","state","double","handleChange","value","setState","handleSubmit","e","props","itemsList","onAddContact","preventDefault","includes","length","setTimeout","this","CSSTransition","in","timeout","unmountOnExit","classNames","className","onSubmit","onChange","target","placeholder","type","Component","mapDispatchToProps","operations","connect","ownProps","contacts","getFilter","loading","normalizedFilter","toLowerCase","removeItem","contactsss","selectors","TransitionGroup","component","map","key","onClick","findByName","arrLength","console","log","App","onGetContacts","appear","isLoading","createReducer","action","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.28228327.chunk.js","sourcesContent":["const ADD = 'ADD_CONTACT';\nconst REMOVE = 'REMOVE_CONTACT';\nconst FIND_CONTACT = 'FIND_CONTACT';\nconst ADD_REQUEST = 'ADD_REQUEST';\nconst ADD_SUCCESS = 'ADD_SUCCESS';\nconst ADD_ERROR = 'ADD_ERROR';\nconst GET_REQUEST = 'GET_REQUEST';\nconst GET_SUCCESS = 'GET_SUCCESS';\nconst GET_ERROR = 'GET_ERROR';\nconst REMOVE_REQUEST = 'REMOVE_REQUEST';\nconst REMOVE_SUCCESS = 'REMOVE_SUCCESS';\nconst REMOVE_ERROR = 'REMOVE_ERROR'\n\nexport default {\n    ADD,\n    REMOVE,\n    FIND_CONTACT,\n    ADD_REQUEST,\n    ADD_SUCCESS,\n    ADD_ERROR,\n    GET_REQUEST,\n    GET_SUCCESS,\n    GET_ERROR,\n    REMOVE_REQUEST,\n    REMOVE_SUCCESS,\n    REMOVE_ERROR\n}","import {v4} from 'uuid'\nimport {createAction} from '@reduxjs/toolkit'\nimport actionTypes from './actionTypes'\n\nconst addContactRequest = createAction(actionTypes.ADD_REQUEST);\nconst addContactSuccess = createAction(actionTypes.ADD_SUCCESS);\nconst addContactError = createAction(actionTypes.ADD_ERROR);\n\nconst removeContactRequest = createAction(actionTypes.REMOVE_REQUEST);\nconst removeContactSuccess = createAction(actionTypes.REMOVE_SUCCESS);\nconst removeContactError = createAction(actionTypes.REMOVE_ERROR);\n\nconst getContactRequest = createAction(actionTypes.GET_REQUEST);\nconst getContactSuccess = createAction(actionTypes.GET_SUCCESS);\nconst getContactError = createAction(actionTypes.GET_ERROR);\n\nconst addContact = createAction(actionTypes.ADD, (name, number) => ({\n    payload: {\n        items: {\n            name,\n            number\n        }\n    }\n}))\n\nconst removeContact = createAction(actionTypes.REMOVE, id => ({\n    payload: {\n        id\n    }\n}))\n\nconst findContact = createAction(actionTypes.FIND_CONTACT, filter => ({\n    payload: {\n        filter: filter\n    }\n}))\n\nexport default {\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n    getContactRequest,\n    getContactSuccess,\n    getContactError,\n    removeContactRequest,\n    removeContactSuccess,\n    removeContactError,\n    // addContact,\n    // removeContact,\n    findContact\n}","import actions from './actions'\nimport axios from 'axios'\n\nconst addContact = (name, number) => dispatch => {\n    dispatch(actions.addContactRequest());\n    axios.post('http://localhost:2000/contacts', {name, number})\n    .then(response => {\n        dispatch(actions.addContactSuccess(response.data))\n    })\n    .catch(error => dispatch(actions.addContactError()))\n}\n\nconst getContacts = () => dispatch => {\n    dispatch(actions.getContactRequest())\n    axios.get('http://localhost:2000/contacts')\n    .then(response => dispatch(actions.getContactSuccess(response.data)))\n    .catch(error => dispatch(actions.getContactError))\n}\n\nconst removeContact = (id) => dispatch => {\n    dispatch(actions.removeContactRequest())\n    axios.delete(`http://localhost:2000/contacts/${id}`)\n    .then(response => dispatch(actions.removeContactSuccess(id)))\n    .catch(error => dispatch(actions.removeContactError))\n}\nexport default {\n    addContact,\n    getContacts,\n    removeContact\n}","import React, { Component } from 'react';\nimport {CSSTransition} from 'react-transition-group'\nimport {connect} from 'react-redux'\nimport actions from '../redux/actions'\nimport contactOperations from '../redux/operations'\nimport '../style.css'\nimport propTypes from 'prop-types'\nimport operations from '../redux/operations';\n\nclass ContactsEditor extends Component {\n\n    state = {\n        name: '',\n        number: '',\n        double: false\n    }\n\n    handleChange = (name, value)=> {\n        this.setState({[name]: value})\n    }\n\n    handleSubmit = e => {\n        const {name, number} = this.state\n        const {itemsList, onAddContact} = this.props\n        e.preventDefault()\n        if(!itemsList.filter(e => e.name.includes(name)).length >= 1) {\n            onAddContact(name, number)\n            this.setState({name: '', number: ''})\n        } else {\n            this.setState({name: '', number: '', double: true})}\n            setTimeout(() => {this.setState({double: false})}, 1000 )\n    }\n\n    render () {\n        const {name, number, double} = this.state\n        const {itemsList} = this.props\n        \n        return (\n            <>\n            <CSSTransition in={double} timeout={1000} unmountOnExit classNames=\"warn\"><p className=\"warn\">Problem invoked!</p></CSSTransition>\n            <form onSubmit={(e) => this.handleSubmit(e)}>\n                <input \n                    onChange={(e) => this.handleChange(e.target.name, e.target.value)} \n                    placeholder=\"name\"\n                    value={name} \n                    name=\"name\" \n                    type=\"text\"\n                    className=\"name\">\n                </input>\n                <input onChange={(e) => this.handleChange(e.target.name, e.target.value)} \n                    placeholder=\"number\"\n                    value={number} \n                    name=\"number\" \n                    type=\"text\"\n                    className=\"number\">\n                </input>\n                <button className=\"button\" type=\"submit\">add</button>\n            </form>\n            </>\n        )\n    }\n};\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        itemsList: state.contacts.items\n    }\n}\n\nconst mapDispatchToProps = {\n        onAddContact: operations.addContact\n        }\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsEditor)\n\nContactsEditor.propTypes = {\n    onAddContact: propTypes.func,\n    itemsList: propTypes.array\n}","const getLoading = state => state.contacts.loading\n\nconst getFilter = state => state.contacts.filter\n\nconst getVisibleContacts = state => {\n    const filter = getFilter(state)\n    const {items} = state.contacts\n    const normalizedFilter = filter.toLowerCase()\n    return items.filter(e => e.name.toLowerCase().includes(normalizedFilter))\n}\n\nexport default {\n    getLoading,\n    getFilter,\n    getVisibleContacts\n}\n","import React from 'react'\nimport {CSSTransition, TransitionGroup} from 'react-transition-group'\nimport {connect} from 'react-redux'\nimport operations from '../redux/operations'\nimport selectors from '../redux/selectors'\nimport propTypes from 'prop-types'\nimport '../style.css'\n\nconst ContactsList = ({contactsss, removeItem}) => {\n    return(\n        <TransitionGroup component=\"ul\">\n            {contactsss.map(({id, name, number}) => (\n                <CSSTransition key={id} in={true}  timeout={500} classNames=\"listItem\" className=\"listElement\">\n                <li key={id} >\n                    <span className=\"name\">{name}</span><span className=\"number\">{number}</span>\n                    <button className=\"button\" onClick={() => removeItem(id)}>remove</button>\n                </li>\n                </CSSTransition>\n            ))}\n        </TransitionGroup>\n    )\n}\n\nconst mapStateToProps = state => ({\n    contactsss: selectors.getVisibleContacts(state)\n})\n\nconst mapDispatchToProps = {\n    removeItem: operations.removeContact,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList)\n\nContactsList.propTypes = {\n    contactsss: propTypes.array,\n    removeItem: propTypes.func   \n}","import React from 'react';\nimport {CSSTransition} from 'react-transition-group'\nimport {connect} from 'react-redux'\nimport actions from '../redux/actions'\nimport '../style.css'\nimport selectors from '../redux/selectors'\nimport propTypes from 'prop-types'\n\nfunction Filter({value, findByName, arrLength}) {\n    console.log(typeof value)\n    return (\n        <CSSTransition in={arrLength > 1} timeout={500} unmountOnExit classNames=\"filter\">\n            <input\n            className=\"name findElement\"\n                type=\"text\"\n                value={value}\n                placeholder=\"find\"\n                onChange={e => findByName(e.target.value)}>\n            </input>\n        </CSSTransition>\n    )\n}\nconst mapStateToProps = (state) => {\n    return {\n        value: selectors.getFilter(state),\n        arrLength: state.contacts.items.length\n    }\n}\nconst mapDispatchToProps = {\n    findByName: actions.findContact\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter)\n\nFilter.propTypes = {\n    value: propTypes.string,\n    findByName: propTypes.func,\n    arrLength: propTypes.number\n}","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {CSSTransition} from 'react-transition-group'\nimport ContactsEditor from './components/ContactsEditor'\nimport ContactsList from './components/ContactsList'\nimport Filter from './components/Filter'\nimport './style.css'\nimport operations from './redux/operations'\nimport selectors from './redux/selectors'\n\n  \n\nclass App extends Component  {\n  componentDidMount() {\n    this.props.onGetContacts()\n\n  }\n    render(){\n    return (\n      <div className=\"wrapper\">\n      <CSSTransition in={true} timeout={1000} classNames=\"title\" appear={true}>\n        <h1>Phone Book</h1>\n      </CSSTransition>\n      <CSSTransition in={true} timeout={1000} classNames=\"title\" appear={true}>\n      <ContactsEditor/>\n      </CSSTransition>\n      <Filter/>\n      <ContactsList/>\n      {this.props.isLoading && <h3>Loading...</h3>}\n      </div>\n    )\n    }\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    isLoading: selectors.getLoading(state)\n  }\n}\n\nconst mapDispatchToProps = {\n  onGetContacts: operations.getContacts\n}\n\n\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App)","import {combineReducers} from 'redux'\nimport {createReducer} from '@reduxjs/toolkit'\nimport actions from './actions'\n\nconst addContact = (state, action) => { return [...state, action.payload]}\nconst removeContact = (state, action) => {return state.filter(e => e.id !== action.payload.id)}\nconst filterContact = (state, action) => {return action.payload.filter}\n\nconst items = createReducer([], {\n    [actions.addContactSuccess]: addContact,\n    [actions.getContactSuccess]: (state, action) => action.payload,\n    [actions.removeContactSuccess]: removeContact\n})\n\nconst filter = createReducer('', {\n    [actions.findContact]: filterContact\n})\n\nconst loading = createReducer(false, {\n    [actions.addContactRequest]: (state, action) => true,\n    [actions.addContactSuccess]: () => false,\n    [actions.addContactError]: () => false,\n    [actions.getContactRequest] : () => true,\n    [actions.getContactSuccess] : () => false,\n    [actions.getContactError] : () => false,\n    [actions.removeContactRequest] : () => true,\n    [actions.removeContactSuccess] : () => false,\n    [actions.removeContactError] : () => false\n})\n\nexport default combineReducers ({\n    items,\n    filter,\n    loading\n})","import {configureStore} from '@reduxjs/toolkit'\nimport contactsReducer from './reducer'\n\nconst store = configureStore({\n    reducer: {\n        contacts: contactsReducer,\n    }})\nexport default store ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/store'\nimport {Provider} from 'react-redux'\n \nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}